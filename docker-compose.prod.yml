version: "3"

services:
  web:
    restart: unless-stopped
    container_name: web_backend
    build:
      context: ./web
      dockerfile: Dockerfile.prod
      args:
        - USER_PASSWORD=$USER_PASSWORD
    env_file: ./.env
    depends_on:
      - db
    command: bash -c "cd web && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/home/app/staticfiles
      - media_volume:/home/app/mediafiles
    expose:
      - 8000
  nginx:
    container_name: nginx
    restart: unless-stopped
    build: ./nginx
    expose:
      - 80
      - 443
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/home/app/staticfiles
      - media_volume:/home/app/mediafiles
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
  certbot:
    restart: unless-stopped
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email rezuan.dzbov@gmail.com -d managerdashboard.ru --agree-tos
  bot:
    env_file: ./bot/.env
    restart: unless-stopped
    container_name: telegram_bot
    build:
      context: ./bot
      args:
        - USER_PASSWORD=$USER_PASSWORD
    command: bash -c "cd bot && python main.py"
    depends_on:
      - nginx
      - redis
    volumes:
      - media_volume:/home/app/mediafiles
    environment:
      USER_PASSWORD: ${USER_PASSWORD}
  db:
    restart: unless-stopped
    container_name: postgres_db
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_PORT: ${SQL_PORT}
    ports:
      - "5432:5432"
  redis:
    env_file: ./bot/.env
    container_name: redis
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/var/lib/redis/data/
    expose:
      - 6379

volumes:
  static_volume:
  media_volume:
  postgres_data:
  redis_data:
