version: "3"

services:
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.prod
    env_file: ./.env
    depends_on:
      - db
    environment:
      SQL_HOST: "db"
    command: bash -c "cd web && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    expose:
      - 8000
    volumes:
      - static_volume:/var/www/staticfiles
      - media_volume:/var/www/mediafiles
    ports:
      - "8000:8000"
  nginx:
    restart: unless-stopped
    image: nginx
    command: bash -c "cd /var/www/staticfiles && chown nginx:nginx ./* && cd /var/www/mediafiles && chown nginx:nginx ./*"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/var/www/staticfiles
      - media_volume:/var/www/mediafiles
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email rezuan.dzbov@gmail.com -d rezaundzibov.online --agree-tos
  bot:
    build: ./bot
    environment:
      API_URL: "http://nginx:80/"
    command: bash -c "cd bot && python main.py"
    depends_on:
      - nginx
    volumes:
      - media_volume:/home/app/mediafiles
  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_PORT: ${SQL_PORT}
    ports:
      - "5432:5432"

volumes:
  static_volume:
  media_volume:
  postgres_data: