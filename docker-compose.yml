version: "3"

services:
  web:
    container_name: web_backend
    build: ./web
    env_file: ./.env
    restart: always
    depends_on:
      - db
    environment:
      SQL_HOST: "db"
    command: bash -c "cd web && python manage.py runserver 0.0.0.0:8000"
    expose:
      - 8000
    volumes:
      - static_volume:/home/app/staticfiles
      - media_volume:/home/app/mediafiles
    ports:
      - "8000:8000"
  bot:
    container_name: telegram_bot
    env_file: ./bot/.env
    build:
      context: ./bot
      args:
        - USER_PASSWORD=$USER_PASSWORD
    restart: always
    command: bash -c "cd bot && python main.py"
    depends_on:
      - web
      - redis
    volumes:
      - media_volume:/home/app/mediafiles
    environment:
      API_URL: "http://web:8000/"
  db:
    container_name: postgres_db
    restart: always
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_PORT: ${SQL_PORT}
    expose:
      - 5432
  redis:
    env_file: ./bot/.env
    container_name: redis
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/var/lib/redis/data/
    expose:
      - 6379


volumes:
  static_volume:
  media_volume:
  postgres_data:
  redis_data:
